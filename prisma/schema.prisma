generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  imageUrl    String?  @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  fundingGoal Int?
  status      ProjectStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categories  ProjectCategoryRelation[]
  alumni      Alumni[]          @relation("AlumniProjects")
}

model ProjectCategory {
  id       Int      @id @default(autoincrement())
  name     String   @unique @db.VarChar(100)
  projects ProjectCategoryRelation[]
}

model ProjectCategoryRelation {
  project   Project         @relation(fields: [projectId], references: [id])
  projectId Int
  category  ProjectCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([projectId, categoryId])
}

enum ProjectStatus {
  PLANNED
  ONGOING
  COMPLETED
}

model Alumni {
  id              Int           @id @default(autoincrement())
  firstName       String        @db.VarChar(100)
  lastName        String        @db.VarChar(100)
  email           String        @unique @db.VarChar(255)
  graduationYear  Int
  course          String        @db.VarChar(255)
  school          String        @db.VarChar(255)
  currentCompany  String?       @db.VarChar(255)
  jobTitle        String?       @db.VarChar(255)
  country         String        @db.VarChar(100)
  city            String?       @db.VarChar(100)
  bio             String?       @db.Text
  linkedInUrl     String?       @db.VarChar(255)
  profileImage    String?       @db.VarChar(255)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  experiences     Experience[]
  skills          Skill[]
  achievements    Achievement[]
  sentConnections Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  posts           Post[]
  projects        Project[]       @relation("AlumniProjects")
  likes           Like[]          @relation("AlumniLikes")
  comments        Comment[]       @relation("AlumniComments")
  sentNotifications     Notification[] @relation("sentNotifications")
  receivedNotifications Notification[] @relation("receivedNotifications")
}

model Experience {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  company     String    @db.VarChar(255)
  location    String?   @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?   @db.Text
  alumniId    Int
  alumni      Alumni    @relation(fields: [alumniId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([alumniId])
}

model Skill {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  alumniId  Int
  alumni    Alumni    @relation(fields: [alumniId], references: [id])
  createdAt DateTime  @default(now())

  @@index([alumniId])
}

model Achievement {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  date        DateTime
  alumniId    Int
  alumni      Alumni    @relation(fields: [alumniId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([alumniId])
}

model Connection {
  id            Int       @id @default(autoincrement())
  fromAlumniId  Int
  toAlumniId    Int
  status        String    @default("pending")
  fromAlumni    Alumni    @relation("SentConnections", fields: [fromAlumniId], references: [id])
  toAlumni      Alumni    @relation("ReceivedConnections", fields: [toAlumniId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([fromAlumniId, toAlumniId])
  @@index([fromAlumniId])
  @@index([toAlumniId])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  alumniId  Int
  alumni    Alumni    @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([alumniId])
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  alumniId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  alumni    Alumni   @relation("AlumniLikes", fields: [alumniId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, alumniId])
  @@index([postId])
  @@index([alumniId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  postId    Int
  alumniId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  alumni    Alumni   @relation("AlumniComments", fields: [alumniId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([alumniId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // e.g., "CONNECTION_REQUEST"
  message   String
  read      Boolean  @default(false)
  toAlumniId Int
  fromAlumniId Int
  createdAt DateTime @default(now())
  toAlumni   Alumni  @relation("receivedNotifications", fields: [toAlumniId], references: [id])
  fromAlumni Alumni  @relation("sentNotifications", fields: [fromAlumniId], references: [id])
}

model School {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  courses Course[]
}

model Course {
  id      Int     @id @default(autoincrement())
  name    String
  school  School   @relation(fields: [schoolId], references: [id])
  schoolId Int
}
